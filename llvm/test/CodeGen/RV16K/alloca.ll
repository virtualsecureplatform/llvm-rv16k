; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=rv16k -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV16K

declare void @notdead(i8*)

; These tests must ensure the stack pointer is restored using the frame
; pointer

define void @simple_alloca(i32 %n) nounwind {
; RV16K-LABEL: simple_alloca:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -4
; RV16K-NEXT:	sw	ra, 2(sp)
; RV16K-NEXT:	sw	fp, 0(sp)
; RV16K-NEXT:	mov	fp, sp
; RV16K-NEXT:	addi	fp, 4
; RV16K-NEXT:	addi	a0, 1
; RV16K-NEXT:	li	a1, -2
; RV16K-NEXT:	and	a1, a0
; RV16K-NEXT:	mov	a0, sp
; RV16K-NEXT:	sub	a0, a1
; RV16K-NEXT:	mov	sp, a0
; RV16K-NEXT:	jal notdead
; RV16K-NEXT:	mov	sp, fp
; RV16K-NEXT:	addi	sp, -4
; RV16K-NEXT:	lw	fp, 0(sp)
; RV16K-NEXT:	lw	ra, 2(sp)
; RV16K-NEXT:	addi	sp, 4
; RV16K-NEXT:	jr	ra

  %1 = alloca i8, i32 %n
  call void @notdead(i8* %1)
  ret void
}

declare i8* @llvm.stacksave()
declare void @llvm.stackrestore(i8*)

define void @scoped_alloca(i32 %n) nounwind {
; RV16K-LABEL: scoped_alloca:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -6
; RV16K-NEXT:	sw	ra, 4(sp)
; RV16K-NEXT:	sw	fp, 2(sp)
; RV16K-NEXT:	sw	s0, 0(sp)
; RV16K-NEXT:	mov	fp, sp
; RV16K-NEXT:	addi	fp, 6
; RV16K-NEXT:	addi	a0, 1
; RV16K-NEXT:	li	a1, -2
; RV16K-NEXT:	and	a1, a0
; RV16K-NEXT:	mov	s0, sp
; RV16K-NEXT:	mov	a0, sp
; RV16K-NEXT:	sub	a0, a1
; RV16K-NEXT:	mov	sp, a0
; RV16K-NEXT:	jal	notdead
; RV16K-NEXT:	mov	sp, s0
; RV16K-NEXT:	mov	sp, fp
; RV16K-NEXT:	addi	sp, -6
; RV16K-NEXT:	lw	s0, 0(sp)
; RV16K-NEXT:	lw	fp, 2(sp)
; RV16K-NEXT:	lw	ra, 4(sp)
; RV16K-NEXT:	addi	sp, 6
; RV16K-NEXT:	jr	ra

  %sp = call i8* @llvm.stacksave()
  %addr = alloca i8, i32 %n
  call void @notdead(i8* %addr)
  call void @llvm.stackrestore(i8* %sp)
  ret void
}
