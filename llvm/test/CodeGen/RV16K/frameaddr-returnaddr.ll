; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=rv16k -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV16K %s

declare void @notdead(i8*)
declare i8* @llvm.frameaddress(i32)
declare i8* @llvm.returnaddress(i32)

define i8* @test_frameaddress_0() nounwind {
; RV16K-LABEL: test_frameaddress_0:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -4
; RV16K-NEXT:	swsp	ra, 2(sp)
; RV16K-NEXT:	swsp	fp, 0(sp)
; RV16K-NEXT:	mov	fp, sp
; RV16K-NEXT:	addi	fp, 4
; RV16K-NEXT:	mov	a0, fp
; RV16K-NEXT:	lwsp	fp, 0(sp)
; RV16K-NEXT:	lwsp	ra, 2(sp)
; RV16K-NEXT:	addi	sp, 4
; RV16K-NEXT:	jr	ra

  %1 = call i8* @llvm.frameaddress(i32 0)
  ret i8* %1
}

define i8* @test_frameaddress_2() nounwind {
; RV16K-LABEL: test_frameaddress_2:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -4
; RV16K-NEXT:	swsp	ra, 2(sp)
; RV16K-NEXT:	swsp	fp, 0(sp)
; RV16K-NEXT:	mov	fp, sp
; RV16K-NEXT:	addi	fp, 4
; RV16K-NEXT:	lw	a0, -4(fp)
; RV16K-NEXT:	lw	a0, -4(a0)
; RV16K-NEXT:	lwsp	fp, 0(sp)
; RV16K-NEXT:	lwsp	ra, 2(sp)
; RV16K-NEXT:	addi	sp, 4
; RV16K-NEXT:	jr	ra

  %1 = call i8* @llvm.frameaddress(i32 2)
  ret i8* %1
}

define i8* @test_frameaddress_3_alloca() nounwind {
; RV16K-LABEL: test_frameaddress_3_alloca:
; RV16K:       # %bb.0:
; RV16K-NEXT:	li	a0, 104
; RV16K-NEXT:	sub	sp, a0
; RV16K-NEXT:	swsp	ra, 102(sp)
; RV16K-NEXT:	swsp	fp, 100(sp)
; RV16K-NEXT:	mov	fp, sp
; RV16K-NEXT:	li	a0, 104
; RV16K-NEXT:	add	fp, a0
; RV16K-NEXT:	li	a0, -104
; RV16K-NEXT:	add	a0, fp
; RV16K-NEXT:	jal	notdead
; RV16K-NEXT:	lw	a0, -4(fp)
; RV16K-NEXT:	lw	a0, -4(a0)
; RV16K-NEXT:	lw	a0, -4(a0)
; RV16K-NEXT:	lwsp	fp, 100(sp)
; RV16K-NEXT:	lwsp	ra, 102(sp)
; RV16K-NEXT:	li	a1, 104
; RV16K-NEXT:	add	sp, a1
; RV16K-NEXT:	jr	ra

  %1 = alloca [100 x i8]
  %2 = bitcast [100 x i8]* %1 to i8*
  call void @notdead(i8* %2)
  %3 = call i8* @llvm.frameaddress(i32 3)
  ret i8* %3
}

define i8* @test_returnaddress_0() nounwind {
; RV16K-LABEL: test_returnaddress_0:
; RV16K:       # %bb.0:
; RV16K-NEXT:	mov	a0, ra
; RV16K-NEXT:	jr	ra

  %1 = call i8* @llvm.returnaddress(i32 0)
  ret i8* %1
}

define i8* @test_returnaddress_2() nounwind {
; RV16K-LABEL: test_returnaddress_2:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -4
; RV16K-NEXT:	swsp	ra, 2(sp)
; RV16K-NEXT:	swsp	fp, 0(sp)
; RV16K-NEXT:	mov	fp, sp
; RV16K-NEXT:	addi	fp, 4
; RV16K-NEXT:	lw	a0, -4(fp)
; RV16K-NEXT:	lw	a0, -4(a0)
; RV16K-NEXT:	lw	a0, -2(a0)
; RV16K-NEXT:	lwsp	fp, 0(sp)
; RV16K-NEXT:	lwsp	ra, 2(sp)
; RV16K-NEXT:	addi	sp, 4
; RV16K-NEXT:	jr	ra

  %1 = call i8* @llvm.returnaddress(i32 2)
  ret i8* %1
}
