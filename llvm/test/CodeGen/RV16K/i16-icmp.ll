; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=rv16k -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV16K

; TODO: check the generated instructions for the equivalent of seqz, snez,
; sltz, sgtz map to something simple

define i16 @icmp_eq(i16 %a, i16 %b) nounwind {
; RV16K-LABEL: icmp_eq:
; RV16K:       # %bb.0:
; RV16K-NEXT:	cmp	a0, a1
; RV16K-NEXT:	je	.LBB0_2
; RV16K-NEXT:# %bb.1:
; RV16K-NEXT:	li	a0, 0
; RV16K-NEXT:	jr	ra
; RV16K-NEXT:.LBB0_2:
; RV16K-NEXT:	li	a0, 1
; RV16K-NEXT:	jr	ra

  %1 = icmp eq i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define i16 @icmp_ne(i16 %a, i16 %b) nounwind {
; RV16K-LABEL: icmp_ne:
; RV16K:       # %bb.0:
; RV16K-NEXT:	cmp	a0, a1
; RV16K-NEXT:	jne	.LBB1_2
; RV16K-NEXT:# %bb.1:
; RV16K-NEXT:	li	a0, 0
; RV16K-NEXT:	jr	ra
; RV16K-NEXT:.LBB1_2:
; RV16K-NEXT:	li	a0, 1
; RV16K-NEXT:	jr	ra

  %1 = icmp ne i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define i16 @icmp_ugt(i16 %a, i16 %b) nounwind {
; RV16K-LABEL: icmp_ugt:
; RV16K:       # %bb.0:
; RV16K-NEXT:	cmp	a1, a0
; RV16K-NEXT:	jb	.LBB2_2
; RV16K-NEXT:# %bb.1:
; RV16K-NEXT:	li	a0, 0
; RV16K-NEXT:	jr	ra
; RV16K-NEXT:.LBB2_2:
; RV16K-NEXT:	li	a0, 1
; RV16K-NEXT:	jr	ra

  %1 = icmp ugt i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define i16 @icmp_uge(i16 %a, i16 %b) nounwind {
; RV16K-LABEL: icmp_uge:
; RV16K:       # %bb.0:
; RV16K-NEXT:	cmp	a1, a0
; RV16K-NEXT:	jbe	.LBB3_2
; RV16K-NEXT:# %bb.1:
; RV16K-NEXT:	li	a0, 0
; RV16K-NEXT:	jr	ra
; RV16K-NEXT:.LBB3_2:
; RV16K-NEXT:	li	a0, 1
; RV16K-NEXT:	jr	ra

  %1 = icmp uge i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define i16 @icmp_ult(i16 %a, i16 %b) nounwind {
; RV16K-LABEL: icmp_ult:
; RV16K:       # %bb.0:
; RV16K-NEXT:	cmp	a0, a1
; RV16K-NEXT:	jb	.LBB4_2
; RV16K-NEXT:# %bb.1:
; RV16K-NEXT:	li	a0, 0
; RV16K-NEXT:	jr	ra
; RV16K-NEXT:.LBB4_2:
; RV16K-NEXT:	li	a0, 1
; RV16K-NEXT:	jr	ra

  %1 = icmp ult i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define i16 @icmp_ule(i16 %a, i16 %b) nounwind {
; RV16K-LABEL: icmp_ule:
; RV16K:       # %bb.0:
; RV16K-NEXT:	cmp	a0, a1
; RV16K-NEXT:	jbe	.LBB5_2
; RV16K-NEXT:# %bb.1:
; RV16K-NEXT:	li	a0, 0
; RV16K-NEXT:	jr	ra
; RV16K-NEXT:.LBB5_2:
; RV16K-NEXT:	li	a0, 1
; RV16K-NEXT:	jr	ra

  %1 = icmp ule i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define i16 @icmp_sgt(i16 %a, i16 %b) nounwind {
; RV16K-LABEL: icmp_sgt:
; RV16K:       # %bb.0:
; RV16K-NEXT:	cmp	a1, a0
; RV16K-NEXT:	jl	.LBB6_2
; RV16K-NEXT:# %bb.1:
; RV16K-NEXT:	li	a0, 0
; RV16K-NEXT:	jr	ra
; RV16K-NEXT:.LBB6_2:
; RV16K-NEXT:	li	a0, 1
; RV16K-NEXT:	jr	ra

  %1 = icmp sgt i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define i16 @icmp_sge(i16 %a, i16 %b) nounwind {
; RV16K-LABEL: icmp_sge:
; RV16K:       # %bb.0:
; RV16K-NEXT:	cmp	a1, a0
; RV16K-NEXT:	jle	.LBB7_2
; RV16K-NEXT:# %bb.1:
; RV16K-NEXT:	li	a0, 0
; RV16K-NEXT:	jr	ra
; RV16K-NEXT:.LBB7_2:
; RV16K-NEXT:	li	a0, 1
; RV16K-NEXT:	jr	ra

  %1 = icmp sge i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define i16 @icmp_slt(i16 %a, i16 %b) nounwind {
; RV16K-LABEL: icmp_slt:
; RV16K:       # %bb.0:
; RV16K-NEXT:	cmp	a0, a1
; RV16K-NEXT:	jl	.LBB8_2
; RV16K-NEXT:# %bb.1:
; RV16K-NEXT:	li	a0, 0
; RV16K-NEXT:	jr	ra
; RV16K-NEXT:.LBB8_2:
; RV16K-NEXT:	li	a0, 1
; RV16K-NEXT:	jr	ra

  %1 = icmp slt i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

define i16 @icmp_sle(i16 %a, i16 %b) nounwind {
; RV16K-LABEL: icmp_sle:
; RV16K:       # %bb.0:
; RV16K-NEXT:	cmp	a0, a1
; RV16K-NEXT:	jle	.LBB9_2
; RV16K-NEXT:# %bb.1:
; RV16K-NEXT:	li	a0, 0
; RV16K-NEXT:	jr	ra
; RV16K-NEXT:.LBB9_2:
; RV16K-NEXT:	li	a0, 1
; RV16K-NEXT:	jr	ra

  %1 = icmp sle i16 %a, %b
  %2 = zext i1 %1 to i16
  ret i16 %2
}

; TODO: check variants with an immediate?
