; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=rv16k -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV16K %s

;;; for all S, T in { uint8, sint8, anyint16 }
; S_arg_to_T_ret = fun ( a : S ) -> cast<T>(a : S)
; pass_S_as_T    = fun ( a : S ) -> receive_T ( cast<T>(a : S) )
; ret_callresult_S_as_T = fun () -> cast<T>(return_S () : S)

define zeroext i8 @uint8_arg_to_uint8_ret(i8 zeroext %a) nounwind {
; RV16K-LABEL: uint8_arg_to_uint8_ret:
; RV16K:       # %bb.0:
; RV16K-NEXT:	jr	ra

  ret i8 %a
}

declare void @receive_uint8(i8 zeroext)

define void @pass_uint8_as_uint8(i8 zeroext %a) nounwind {
; RV16K-LABEL: pass_uint8_as_uint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	receive_uint8
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  call void @receive_uint8(i8 zeroext %a)
  ret void
}

declare zeroext i8 @return_uint8()

define zeroext i8 @ret_callresult_uint8_as_uint8() nounwind {
; RV16K-LABEL: ret_callresult_uint8_as_uint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	return_uint8
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = call zeroext i8 @return_uint8()
  ret i8 %1
}

define signext i8 @uint8_arg_to_sint8_ret(i8 zeroext %a) nounwind {
; RV16K-LABEL: uint8_arg_to_sint8_ret:
; RV16K:       # %bb.0:
; RV16K-NEXT:	li	a1, 8
; RV16K-NEXT:	lsl	a0, a1
; RV16K-NEXT:	asr	a0, a1
; RV16K-NEXT:	jr	ra

  ret i8 %a
}

declare void @receive_sint8(i8 signext)

define void @pass_uint8_as_sint8(i8 zeroext %a) nounwind {
; RV16K-LABEL: pass_uint8_as_sint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	li	a1, 8
; RV16K-NEXT:	lsl	a0, a1
; RV16K-NEXT:	asr	a0, a1
; RV16K-NEXT:	jal	receive_sint8
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  call void @receive_sint8(i8 signext %a)
  ret void
}

define signext i8 @ret_callresult_uint8_as_sint8() nounwind {
; RV16K-LABEL: ret_callresult_uint8_as_sint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	return_uint8
; RV16K-NEXT:	li	a1, 8
; RV16K-NEXT:	lsl	a0, a1
; RV16K-NEXT:	asr	a0, a1
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = call zeroext i8 @return_uint8()
  ret i8 %1
}

define signext i16 @uint8_arg_to_anyint16_ret(i8 zeroext %a) nounwind {
; RV16K-LABEL: uint8_arg_to_anyint16_ret:
; RV16K:       # %bb.0:
; RV16K-NEXT:	jr	ra

  %1 = zext i8 %a to i16
  ret i16 %1
}

declare void @receive_anyint16(i16 signext)

define void @pass_uint8_as_anyint16(i8 zeroext %a) nounwind {
; RV16K-LABEL: pass_uint8_as_anyint16:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	receive_anyint16
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = zext i8 %a to i16
  call void @receive_anyint16(i16 signext %1)
  ret void
}

define signext i16 @ret_callresult_uint8_as_anyint16() nounwind {
; RV16K-LABEL: ret_callresult_uint8_as_anyint16:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	return_uint8
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = call zeroext i8 @return_uint8()
  %2 = zext i8 %1 to i16
  ret i16 %2
}

define zeroext i8 @sint8_arg_to_uint8_ret(i8 signext %a) nounwind {
; RV16K-LABEL: sint8_arg_to_uint8_ret:
; RV16K:       # %bb.0:
; RV16K-NEXT:	li	a1, 255
; RV16K-NEXT:	and	a0, a1
; RV16K-NEXT:	jr	ra

  ret i8 %a
}

define void @pass_sint8_as_uint8(i8 signext %a) nounwind {
; RV16K-LABEL: pass_sint8_as_uint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	li	a1, 255
; RV16K-NEXT:	and	a0, a1
; RV16K-NEXT:	jal	receive_uint8
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  call void @receive_uint8(i8 zeroext %a)
  ret void
}

declare signext i8 @return_sint8()

define zeroext i8 @ret_callresult_sint8_as_uint8() nounwind {
; RV16K-LABEL: ret_callresult_sint8_as_uint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	return_sint8
; RV16K-NEXT:	li	a1, 255
; RV16K-NEXT:	and	a0, a1
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = call signext i8 @return_sint8()
  ret i8 %1
}

define signext i8 @sint8_arg_to_sint8_ret(i8 signext %a) nounwind {
; RV16K-LABEL: sint8_arg_to_sint8_ret:
; RV16K:       # %bb.0:
; RV16K-NEXT:	jr	ra

  ret i8 %a
}

define void @pass_sint8_as_sint8(i8 signext %a) nounwind {
; RV16K-LABEL: pass_sint8_as_sint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	receive_sint8
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  call void @receive_sint8(i8 signext %a)
  ret void
}

define signext i8 @ret_callresult_sint8_as_sint8() nounwind {
; RV16K-LABEL: ret_callresult_sint8_as_sint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	return_sint8
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = call signext i8 @return_sint8()
  ret i8 %1
}

define signext i16 @sint8_arg_to_anyint16_ret(i8 signext %a) nounwind {
; RV16K-LABEL: sint8_arg_to_anyint16_ret:
; RV16K:       # %bb.0:
; RV16K-NEXT:	jr	ra

  %1 = sext i8 %a to i16
  ret i16 %1
}

define void @pass_sint8_as_anyint16(i8 signext %a) nounwind {
; RV16K-LABEL: pass_sint8_as_anyint16:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	receive_anyint16
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = sext i8 %a to i16
  call void @receive_anyint16(i16 signext %1)
  ret void
}

define signext i16 @ret_callresult_sint8_as_anyint16() nounwind {
; RV16K-LABEL: ret_callresult_sint8_as_anyint16:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	return_sint8
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = call signext i8 @return_sint8()
  %2 = sext i8 %1 to i16
  ret i16 %2
}

define zeroext i8 @anyint16_arg_to_uint8_ret(i16 signext %a) nounwind {
; RV16K-LABEL: anyint16_arg_to_uint8_ret:
; RV16K:       # %bb.0:
; RV16K-NEXT:	li	a1, 255
; RV16K-NEXT:	and	a0, a1
; RV16K-NEXT:	jr	ra

  %1 = trunc i16 %a to i8
  ret i8 %1
}

define void @pass_anyint16_as_uint8(i16 signext %a) nounwind {
; RV16K-LABEL: pass_anyint16_as_uint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	li	a1, 255
; RV16K-NEXT:	and	a0, a1
; RV16K-NEXT:	jal	receive_uint8
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = trunc i16 %a to i8
  call void @receive_uint8(i8 zeroext %1)
  ret void
}

declare signext i16 @return_anyint16()

define zeroext i8 @ret_callresult_anyint16_as_uint8() nounwind {
; RV16K-LABEL: ret_callresult_anyint16_as_uint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	return_anyint16
; RV16K-NEXT:	li	a1, 255
; RV16K-NEXT:	and	a0, a1
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = call signext i16 @return_anyint16()
  %2 = trunc i16 %1 to i8
  ret i8 %2
}

define signext i8 @anyint16_arg_to_sint8_ret(i16 signext %a) nounwind {
; RV16K-LABEL: anyint16_arg_to_sint8_ret:
; RV16K:       # %bb.0:
; RV16K-NEXT:	li	a1, 8
; RV16K-NEXT:	lsl	a0, a1
; RV16K-NEXT:	asr	a0, a1
; RV16K-NEXT:	jr	ra

  %1 = trunc i16 %a to i8
  ret i8 %1
}

define void @pass_anyint16_as_sint8(i16 signext %a) nounwind {
; RV16K-LABEL: pass_anyint16_as_sint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	li	a1, 8
; RV16K-NEXT:	lsl	a0, a1
; RV16K-NEXT:	asr	a0, a1
; RV16K-NEXT:	jal	receive_sint8
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = trunc i16 %a to i8
  call void @receive_sint8(i8 signext %1)
  ret void
}

define signext i8 @ret_callresult_anyint16_as_sint8() nounwind {
; RV16K-LABEL: ret_callresult_anyint16_as_sint8:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	return_anyint16
; RV16K-NEXT:	li	a1, 8
; RV16K-NEXT:	lsl	a0, a1
; RV16K-NEXT:	asr	a0, a1
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = call signext i16 @return_anyint16()
  %2 = trunc i16 %1 to i8
  ret i8 %2
}

define signext i16 @anyint16_arg_to_anyint16_ret(i16 signext %a) nounwind {
; RV16K-LABEL: anyint16_arg_to_anyint16_ret:
; RV16K:       # %bb.0:
; RV16K-NEXT:	jr	ra

  ret i16 %a
}

define void @pass_anyint16_as_anyint16(i16 signext %a) nounwind {
; RV16K-LABEL: pass_anyint16_as_anyint16:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	receive_anyint16
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  call void @receive_anyint16(i16 signext %a)
  ret void
}

define signext i16 @ret_callresult_anyint16_as_anyint16() nounwind {
; RV16K-LABEL: ret_callresult_anyint16_as_anyint16:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	jal	return_anyint16
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = call signext i16 @return_anyint16()
  ret i16 %1
}
