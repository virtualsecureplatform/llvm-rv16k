; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=rv16k -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV16K %s

%struct.Foo = type { i16, i16, i16, i16, i8 }
@foo = global %struct.Foo { i16 1, i16 2, i16 3, i16 4, i8 5 }

define i16 @callee(%struct.Foo* byval %f) {
; RV16K-LABEL: callee:
; RV16K:       # %bb.0: # %entry
; RV16K-NEXT:	lw	a0, 0(a0)
; RV16K-NEXT:	jr	ra

entry:
  %0 = getelementptr inbounds %struct.Foo, %struct.Foo* %f, i32 0, i32 0
  %1 = load i16, i16* %0
  ret i16 %1
}

define void @caller() {
; RV16K-LABEL: caller:
; RV16K:       # %bb.0: # %entry
; RV16K-NEXT:	li	a0, 12
; RV16K-NEXT:	sub	sp, a0
; RV16K-NEXT:	swsp	ra, 10(sp)
; RV16K-NEXT:	li	a0, foo+8
; RV16K-NEXT:	lw	a0, 0(a0)
; RV16K-NEXT:	swsp	a0, 8(sp)
; RV16K-NEXT:	li	a0, foo+6
; RV16K-NEXT:	lw	a0, 0(a0)
; RV16K-NEXT:	swsp	a0, 6(sp)
; RV16K-NEXT:	li	a0, foo+4
; RV16K-NEXT:	lw	a0, 0(a0)
; RV16K-NEXT:	swsp	a0, 4(sp)
; RV16K-NEXT:	li	a0, foo+2
; RV16K-NEXT:	lw	a0, 0(a0)
; RV16K-NEXT:	swsp	a0, 2(sp)
; RV16K-NEXT:	li	a0, foo
; RV16K-NEXT:	lw	a1, 0(a0)
; RV16K-NEXT:	swsp	a1, 0(sp)
; RV16K-NEXT:	jal	callee
; RV16K-NEXT:	lwsp	ra, 10(sp)
; RV16K-NEXT:	li	a0, 12
; RV16K-NEXT:	add	sp, a0
; RV16K-NEXT:	jr	ra

entry:
  %call = call i16 @callee(%struct.Foo* byval @foo)
  ret void
}
