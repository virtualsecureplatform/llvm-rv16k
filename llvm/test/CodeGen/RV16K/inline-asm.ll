; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=rv16k -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV16K %s

@gi = external global i16

define i16 @constraint_r(i16 %a, i16* %b) {
; RV16K-LABEL: constraint_r:
; RV16K:       # %bb.0:
; RV16K-NEXT:	li	a1, gi
; RV16K-NEXT:	lw	a1, 0(a1)
; RV16K-NEXT:	#APP
; RV16K-NEXT:	add  a0, a1
; RV16K-NEXT:	#NO_APP
; RV16K-NEXT:	jr	ra

  %1 = load i16, i16* @gi
  %2 = tail call i16 asm "add  $1, $2", "=r,r,r"(i16 %a, i16 %1)
  ret i16 %2
}

define i16 @constraint_i(i16 %a, i16* %b) {
; RV16K-LABEL: constraint_i:
; RV16K:       # %bb.0:
; RV16K-NEXT:	#APP
; RV16K-NEXT:	addi a0, 5
; RV16K-NEXT:	#NO_APP
; RV16K-NEXT:	jr	ra

  %1 = load i16, i16* @gi
  %2 = tail call i16 asm "addi $1, $2", "=r,r,i"(i16 %a, i16 5)
  ret i16 %2
}

define void @constraint_m(i16* %a) {
; RV16K-LABEL: constraint_m:
; RV16K:       # %bb.0:
; RV16K-NEXT:	#APP
; RV16K-NEXT:	#NO_APP
; RV16K-NEXT:	jr	ra

  call void asm sideeffect "", "=*m"(i16* %a)
  ret void
}

define i16 @constraint_m2(i16* %a) {
; RV16K-LABEL: constraint_m2:
; RV16K:       # %bb.0:
; RV16K-NEXT:	#APP
; RV16K-NEXT:	lw a0, 0(a0)
; RV16K-NEXT:	#NO_APP
; RV16K-NEXT:	jr	ra

  %1 = tail call i16 asm "lw $0, $1", "=r,*m"(i16* %a) nounwind
  ret i16 %1
}

; TODO: expend tests for more complex constraints, out of range immediates etc
