; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=rv16k -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV16K

; Basic shift support is tested as part of ALU.ll. This file ensures that
; shifts which may not be supported natively are lowered properly.

define i32 @lshr32(i32 %a, i32 %b) nounwind {
; RV16K-LABEL: lshr32:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	li	a3, __lshrsi3
; RV16K-NEXT:	jalr	a3
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = lshr i32 %a, %b
  ret i32 %1
}

define i32 @ashr32(i32 %a, i32 %b) nounwind {
; RV16K-LABEL: ashr32:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	li	a3, __ashrsi3
; RV16K-NEXT:	jalr	a3
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = ashr i32 %a, %b
  ret i32 %1
}

define i32 @shl32(i32 %a, i32 %b) nounwind {
; RV16K-LABEL: shl32:
; RV16K:       # %bb.0:
; RV16K-NEXT:	addi	sp, -2
; RV16K-NEXT:	sw	ra, 0(sp)
; RV16K-NEXT:	li	a3, __ashlsi3
; RV16K-NEXT:	jalr	a3
; RV16K-NEXT:	lw	ra, 0(sp)
; RV16K-NEXT:	addi	sp, 2
; RV16K-NEXT:	jr	ra

  %1 = shl i32 %a, %b
  ret i32 %1
}
