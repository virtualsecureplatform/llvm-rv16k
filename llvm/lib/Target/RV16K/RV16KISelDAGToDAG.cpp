// Copyright 2019 Ryotaro Banno, Kotaro Matsuoka, Naoki Matsumoto
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "MCTargetDesc/RV16KMCTargetDesc.h"
#include "RV16K.h"
#include "RV16KTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "rv16k-isel"

// RV16K-specific code to select RV16K machine instructions for
// SelectionDAG operations.
namespace {
class RV16KDAGToDAGISel final : public SelectionDAGISel {
public:
  explicit RV16KDAGToDAGISel(RV16KTargetMachine &TargetMachine)
      : SelectionDAGISel(TargetMachine) {}

  StringRef getPassName() const override {
    return "RV16K DAG->DAG Pattern Instruction Selection";
  }

  void Select(SDNode *Node) override;

  // Include the pieces autogenerated from the target description.
#include "RV16KGenDAGISel.inc"
};
} // namespace

void RV16KDAGToDAGISel::Select(SDNode *Node) {
  // If we have a custom node, we have already selected
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }

  // Select the default instruction.
  SelectCode(Node);
}

// This pass converts a legalized DAG into a RV16K-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createRV16KISelDag(RV16KTargetMachine &TM) {
  return new RV16KDAGToDAGISel(TM);
}
